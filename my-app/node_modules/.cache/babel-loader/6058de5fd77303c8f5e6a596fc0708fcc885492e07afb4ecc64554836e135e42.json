{"ast":null,"code":"// src/api.js\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  withCredentials: true\n});\n\n// Add a request interceptor to include the token\napi.interceptors.request.use(config => {\n  // Get the token from sessionStorage\n  const token = sessionStorage.getItem('token');\n\n  // Check if the request URL or method is for login or registration\n  const isAuthRequest = config.url.includes('/auth/login') || config.url.includes('/auth/register');\n  const isAuthMethod = config.method === 'post' && (config.url === '/auth/login' || config.url === '/auth/register');\n\n  // Only add the Authorization header if it's not a login or registration request and token is available\n  if (token && !isAuthRequest && !isAuthMethod) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","interceptors","request","use","config","token","sessionStorage","getItem","isAuthRequest","url","includes","isAuthMethod","method","headers","Authorization","error","Promise","reject"],"sources":["C:/Users/e040420/Desktop/CustomerSupportAPI/CustomerTicketingServiceUpdated/my-app/src/api.js"],"sourcesContent":["// src/api.js\r\nimport axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n  withCredentials: true,\r\n});\r\n\r\n// Add a request interceptor to include the token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Get the token from sessionStorage\r\n    const token = sessionStorage.getItem('token');\r\n\r\n    // Check if the request URL or method is for login or registration\r\n    const isAuthRequest = config.url.includes('/auth/login') || config.url.includes('/auth/register');\r\n    const isAuthMethod = config.method === 'post' && (config.url === '/auth/login' || config.url === '/auth/register');\r\n\r\n    // Only add the Authorization header if it's not a login or registration request and token is available\r\n    if (token && !isAuthRequest && !isAuthMethod) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE7C;EACA,MAAMC,aAAa,GAAGJ,MAAM,CAACK,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,IAAIN,MAAM,CAACK,GAAG,CAACC,QAAQ,CAAC,gBAAgB,CAAC;EACjG,MAAMC,YAAY,GAAGP,MAAM,CAACQ,MAAM,KAAK,MAAM,KAAKR,MAAM,CAACK,GAAG,KAAK,aAAa,IAAIL,MAAM,CAACK,GAAG,KAAK,gBAAgB,CAAC;;EAElH;EACA,IAAIJ,KAAK,IAAI,CAACG,aAAa,IAAI,CAACG,YAAY,EAAE;IAC5CP,MAAM,CAACS,OAAO,CAACC,aAAa,GAAG,UAAUT,KAAK,EAAE;EAClD;EAEA,OAAOD,MAAM;AACf,CAAC,EACAW,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,eAAelB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}